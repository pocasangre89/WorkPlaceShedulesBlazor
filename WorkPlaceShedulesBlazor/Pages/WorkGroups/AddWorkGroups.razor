@page "/AddWorkGroups"

@inject SweetAlertService Swal;
@inject IWorkGroupsService UserWorkGroupsService;

@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization;
@attribute [Authorize(Roles = "Administrador")]


<h3>Agregar Usuarios</h3>

<EditForm Model="@workGroups" OnValidSubmit="SaveWorkPlace">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="FirstName" class="form-label">Nombre del Grupo</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="workGroups.GroupName" />
        </div>
        <ValidationMessage For="@(() => workGroups.GroupName)" />
    </div>
    <div class="mb-3">
        <label for="LastName" class="form-label">Descripción de Grupo</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="workGroups.GroupDescription" />
        </div>
        <ValidationMessage For="@(() => workGroups.GroupDescription)" />
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Save</button>
        <button class="btn btn-light" @onclick="Cancel">Cancel</button>
    </div>
</EditForm>
<p>@errorMessage</p>

@code {
    WorkGroupsDTO workGroups = new WorkGroupsDTO();
    private string errorMessage;


    [Inject]
    private NavigationManager Navigation { get; set; }

    private async Task SaveWorkPlace()
    {
        var respData = await UserWorkGroupsService.SaveWorkGroups(workGroups);
        if (respData != 1)
        {
            errorMessage = "Error al almacenar el grupo de trabajo";
        }
        else
        {
            Navigation.NavigateTo("/WorkGroups");
        }
    }

    protected async Task Cancel()
    {
        Navigation.NavigateTo("/WorkGroups", true);
    }
}
