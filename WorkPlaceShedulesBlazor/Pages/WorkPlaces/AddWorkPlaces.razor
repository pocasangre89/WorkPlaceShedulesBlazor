@page "/AddWorkPlaces"

@inject SweetAlertService Swal;
@inject IWorkPlacesService UserworkPlacesService;

@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization;
@attribute [Authorize(Roles = "Administrador")]


<h3>Agregar Puesto de Trabajo</h3>

<EditForm Model="@workPlaces" OnValidSubmit="SaveWorkPlace">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="FirstName" class="form-label">Codigo del Espacio de Trabajo</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="workPlaces.WorkPlaceCode" />
        </div>
        <ValidationMessage For="@(() => workPlaces.WorkPlaceCode)" />
    </div>
    <div class="mb-3">
        <label for="LastName" class="form-label">Nombre del Espacio de Trabajo</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="workPlaces.WorkPlaceName" />
        </div>
        <ValidationMessage For="@(() => workPlaces.WorkPlaceName)" />
    </div>
    <div class="mb-3">
        <label for="EmailAddress" class="form-label">Numero del Espacio de Trabajo</label>
        <div class="col-md-4">
            <InputNumber class="form-control" @bind-Value="workPlaces.WorkPlaceNumber" />
        </div>
        <ValidationMessage For="@(() => workPlaces.WorkPlaceNumber)" />
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Save</button>
        <button class="btn btn-light" @onclick="Cancel">Cancel</button>
    </div>
</EditForm>
<p>@errorMessage</p>

@code {
    WorkPlacesDTO workPlaces = new WorkPlacesDTO();
    private string errorMessage;

    [Inject]
    private NavigationManager Navigation { get; set; }

    private async Task SaveWorkPlace()
    {
        var respData = await UserworkPlacesService.SaveWorkPlaces(workPlaces);
        if (respData != 1)
        {
            errorMessage = "Error al almacenar el espacio de trabajo";
        }
        else
        {
            Navigation.NavigateTo("/WorkPlaces");
        }
    }

    protected async Task Cancel()
    {
        Navigation.NavigateTo("/WorkPlaces", true);
    }
}
